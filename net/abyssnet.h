/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package abyss/net */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) int GetVersion(char* buf, int buflen);
extern __declspec(dllexport) void CloseError(uintptr_t error_handle);
extern __declspec(dllexport) int GetErrorBodyLength(uintptr_t error_handle);
extern __declspec(dllexport) int GetErrorBody(uintptr_t error_handle, char* buf, int buflen);
extern __declspec(dllexport) uintptr_t NewAbyssHost(char* hash, int hash_len, char* backend_root, int backend_root_len);
extern __declspec(dllexport) void CloseAbyssHost(uintptr_t handle);
extern __declspec(dllexport) uintptr_t GetAhmpError(uintptr_t host_handle);
extern __declspec(dllexport) int LocalAddr(uintptr_t host_handle, char* buf, int buflen);
extern __declspec(dllexport) void RequestPeerConnect(uintptr_t host_handle, char* remoteaurl, int remoteaurl_len);
extern __declspec(dllexport) void DisconnectPeer(uintptr_t host_handle, char* hash, int hash_len);
extern __declspec(dllexport) int WaitANDEvent(uintptr_t host_handle, char* buf, int buf_len);
extern __declspec(dllexport) int OpenWorld(uintptr_t host_handle, char* path, int path_len, char* url, int url_len);
extern __declspec(dllexport) void CloseWorld(uintptr_t host_handle, char* path, int path_len);
extern __declspec(dllexport) void Join(uintptr_t host_handle, char* localpath, int localpath_len, char* remoteaurl, int remoteaurl_len);
extern __declspec(dllexport) uintptr_t SOMRequestService(uintptr_t host_handle, char* peer_hash, int peer_hash_len, char* world_uuid, int world_uuid_len);
extern __declspec(dllexport) void SOMInitiateService(uintptr_t host_handle, char* peer_hash, int peer_hash_len, char* world_uuid, int world_uuid_len);
extern __declspec(dllexport) void SOMTerminateService(uintptr_t host_handle, char* peer_hash, int peer_hash_len, char* world_uuid, int world_uuid_len);
extern __declspec(dllexport) void SOMRegisterObject(uintptr_t host_handle, char* url, int url_len, char* object_uuid, int object_uuid_len);
extern __declspec(dllexport) uintptr_t SOMShareObject(uintptr_t host_handle, char* peer_hash, int peer_hash_len, char* world_uuid, int world_uuid_len, char* objects_uuid, int objects_uuid_len);
extern __declspec(dllexport) void SOMCloseEvent(uintptr_t event_handle);
extern __declspec(dllexport) int SOMGetEventBodyLength(uintptr_t event_handle);
extern __declspec(dllexport) int SOMGetEventBody(uintptr_t event_handle, char* buf, int buflen);
extern __declspec(dllexport) uintptr_t SOMWaitEvent(uintptr_t host_handle);
extern __declspec(dllexport) void CloseHttpResponse(uintptr_t response_handle);
extern __declspec(dllexport) uintptr_t HttpGet(uintptr_t handle, char* url, int url_len);
extern __declspec(dllexport) uintptr_t HttpHead(uintptr_t handle, char* url, int url_len);
extern __declspec(dllexport) uintptr_t HttpPost(uintptr_t handle, char* url, int url_len, char* contentType, int contentType_len, char* body, int bodylen);
extern __declspec(dllexport) int GetReponseStatus(uintptr_t response_handle);
extern __declspec(dllexport) int GetReponseBodyLength(uintptr_t response_handle);
extern __declspec(dllexport) int GetResponseBody(uintptr_t response_handle, char* buf, int buflen);

#ifdef __cplusplus
}
#endif
